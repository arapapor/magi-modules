# Workflow:
# - start server, start client
# - Loop every minute:
#   - start iteration (do gen and consump calculations)
#   - 
#   - write to database
# - Loop every 5 minutes
#   - client message to server of next five minute's predicted gen and consump
#   - server determines next five minute's predetermined necessary energy transfers from surpluses to deficits
#   - server message to clients of ^ energy transfers
#   - 
# - end client, end server

groups:
    server_group: [ server ]
    building_group: [ b-0, b-1, b-2, b-3, b-4, b-5, b-6, b-7, b-8, b-9, b-10, b-11,
                      b-12, b-13, b-14, b-15, b-16, b-17, b-18, b-19, b-20 ]
    
# Parameter file (to be used in execargs to overwrite default values in __init__)
configFileName: &params /PATH/

# Number of full days to be simulated
dayIterations: &dayIter 1

agents:
    server_agent:
        group: server_group
        path: /users/rning/magi-modules/SmartGridSchool/Server/
        execargs: { port: 55353 }
    
    building_agent:
        group: building_group
        path: /users/rning/magi-modules/SmartGridSchool/Building/
        execargs: { port: 55353, server: 'server' }
    
streamstarts: [ server_stream ]

eventstreams:
    server_stream:
        -   type: event
            agent: server_agent
            method: startServer
            args: { port: 54454 }
            trigger: commServerStarted
        
        -   type: trigger
            triggers: [ {event: commServerStarted, target: 'building_stream' } ]
    
    building_stream: 
        -   type: event
            agent: building_agent
            method: setConfiguration
            args: {}
            trigger: configDone
        
        -   type: trigger
            triggers: [ {event: configDone} ]
        
        
        
        -   type: event
            agent: building_agent
            method: startclient
            args: {}
            trigger: clientStarted
        
        -   type: trigger
            triggers: [ {timeout: 15000} ]
        
        -   type: event
            agent: building_agent
            method: stopclient
            args: {}
            trigger: BagentStopped
        
        -   type: trigger
            triggers: [ {event: BagentStopped, target: 'exit'} ]
