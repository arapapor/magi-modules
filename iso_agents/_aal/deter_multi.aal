groups:
  scenario_creator_group: [servernode]
  iso_server_group: &serverlist [servernode]
  iso_client_group: &clientlist [clientnode-1, clientnode-2, clientnode-3]

agents:
  scenario_creator_agent:
    group: scenario_creator_group
    path: /proj/montage/magi-modules/iso_agents/scenario_creator_agent/
    execargs: {
      filename: /proj/montage/magi-modules/iso_agents/tmp/custom-scenario.json
    }

  iso_server_agent:
    group: iso_server_group
    path: /proj/montage/magi-modules/iso_agents/iso_server_agent
    execargs: {}
  
  iso_client_agent:
    group: iso_client_group
    path: /proj/montage/magi-modules/iso_agents/iso_client_agent
    execargs: {
      server: servernode, 
    }

streamstarts: [
  scenario_creator_stream,
  iso_server_stream,
  iso_client_stream,
  cleanup_stream
]

eventstreams:
  scenario_creator_stream: 
      - type: event
        agent: scenario_creator_agent 
        trigger: scenarioCreated 
        method: createScenario
        args: {}

      - type: trigger
        triggers: [ { event: scenarioCreated, agent: scenario_creator_agent } ] 

      - type: event
        agent: scenario_creator_agent 
        method: releaseScenario 
        args: {}
  
  iso_server_stream:
      - type: trigger
        triggers: [ { event: scenarioCreated } ]
      
      - type: event
        agent: iso_server_agent 
        trigger: serverReady
        method: initServer
        args: {}

      - type: trigger
        triggers: [ { event: clientReady, agent: iso_client_agent} ] 

      - type: event
        agent: iso_server_agent 
        method: startSimulation
        trigger: simulationStarted 
        args: {}

      - type: trigger
        triggers: [ { timeout: 10000 } ]

      - type: event
        agent: iso_server_agent 
        trigger: simulationStopped 
        method: stopSimulation 
        args: {} 

  iso_client_stream:      
      - type: trigger
        triggers: [ { event: serverReady } ] 

      - type: event
        agent: iso_client_agent 
        method: initClient
        args: {}

      - type: event
        agent: iso_client_agent 
        method: registerWithServer
        trigger: clientReady
        args: {}

      - type: trigger
        triggers: [ { event: simulationStarted } ]

      - type: event
        agent: iso_client_agent
        method: startClient
        args: {}

      - type: trigger
        triggers: [ { event: simulationStopped } ]

      - type: event
        trigger: clientStopped
        agent: iso_client_agent
        method: stopClient
        args: {}

  cleanup_stream:
      - type: trigger
        triggers: [ 
          { 
            event: clientStopped, 
            agent: iso_client_agent, 
            target: exit
          } 
        ] 
