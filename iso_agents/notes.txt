
Left Off:
	- Just finished getting configurator running with new orch flow, and debugged threads
	- Everything ' works' but need to confirm that it's actually doing what it's supposed to, so..
		- Need to build tester/comparer code to read from mongo and compare with paul's export files
		-- AKA DO THE V&V

Notes:
	- time step in client should be configured somewhere


Issues:
	- 

Next Steps:
	- V & V:
		- Phase 1: (Deterministic, no latency)
			- Consume output from Matlab code
				- 1: Toy scenario with 3 units
				- 2: BBB Paper Scenario w/ 105 units
			- Agents fully parameterized through MAGI
			- Read from config file and export TCL/AAL
		- Remove references to agileBalancing / BBB (should be able to use any algorithm)

		- Phase 2: (Stochastic, no latency)
		- Phase 3: (Stochastic, with latency)
			- Strategies for handling latency
				- NM, No-hold, etc.
		- Export to MAGI graph



Consume config file:
	- Read from CSV to get each agent
	- Read from CSV file to get VPP power function
		- Load the vpp power history into a list and wrap it with a pDispatch function



Consume testdata file:
	- For UNIT: 
		- Test each value (eMin, pForced, etc.) with each step unit history in testdata
	- For ISO:
		- Test each value of power Function at each timestep
		- Test pDispatch for each unit, and all other parameters




	- Verification and Validation of system using Paul's Matlab code for comparison
		- Implement mechanism to export / visualize the data generated easily
		- Issues to look out for:
			- (PW) Corner Case List:
				-Updating energy when multiple timesteps occur between last P-setting
				-Update comes from client while dispatch is being calculated
				-No update received from client, so handle fixed P's
				-RX of Stale Energy values (which one to take, ISO's view or new E)
			- (PW) Fault Tolerance:
				-Force P dispatch when comms are lost
					(If comm lost, P=constrained(last P) , i.e. assume client keeps doing what it was doing until it meets constraints on max E, etc.
				-Predict forced P actions
					(If client has forced P, it will consume power at that level regardless of dispatch control)
				-Know when timeout occurs (i.e. keepalive)
				-Historize, revert to pre-drop, validated commands
	- Scenario Configurator
		- Generate AAL & TCL automatically with user-friendly front-end (e.g. yaml, python, json, etc.)
		- Use stochastic functions, etc.
	- Design realistic / interesting scenarios
	- Scale to 1000's of nodes
		- Switch to containerized agents


Maybe:
	- Change min log level in magi bootstrap
	- Get common libraries in one place / add to python path?

Remember:
	- Confirm done, Wrap all threads in try/except to make sure exceptions are logged
	- 
	
	

-------------- Older notes --------------------

Corner Case List:
	-Updating energy when multiple timesteps occur between last P-setting
	-Update comes from client while dispatch is being calculated
	-No update received from client, so handle fixed P's
	-RX of Stale Energy values (which one to take, ISO's view or new E)

Fault Tolerance:
	-Force P dispatch when comms are lost
		(If comm lost, P=constrained(last P) , i.e. assume client keeps doing what it was doing until it meets constraints on max E, etc.
	-Predict forced P actions
		(If client has forced P, it will consume power at that level regardless of dispatch control)
	-Know when timeout occurs (i.e. keepalive)
	-Historize, revert to pre-drop, validated commands

3) Plot results as function of client's view 
4) Run different scenarios (topology, latency, number of clients)
	--Scale everything but network 
5) Implement plugin electric vehicle algorithm (similar to Battery part of BBB)