
groups:
  server_group: [node-0]
  client_group1: [node-1]
  client_group2: [node-2]
  client_group3: [node-3]
  client_group4: [node-4]
  sensor_group: [control]
  nclient_group: [node-1, node-2, node-3, node-4]  
  nserver_group: &slist [control]
  attacker_group1: [control]
  attacker_group2: [control]
  attacker_group3: [control]
    
agents:
  server_agent:
    group: server_group
    path: /proj/montage/magi-modules/rls_centralized 
    execargs: {}

  client_agent1:
    group: client_group1
    path: /proj/montage/magi-modules/rls_centralized 
    execargs: {}

  client_agent2:
    group: client_group2
    path: /proj/montage/magi-modules/rls_centralized 
    execargs: {}

  client_agent3:
    group: client_group3
    path: /proj/montage/magi-modules/rls_centralized 
    execargs: {}

  client_agent4:
    group: client_group4
    path: /proj/montage/magi-modules/rls_centralized 
    execargs: {}

  intfsensor_agent:
    group: sensor_group
    path: /share/magi/modules/pktcounters/
    execargs: {}

  nclient_agent:
    group: nclient_group
    path: /share/magi/modules/http_client/
    execargs: {servers: *slist, interval: '1', sizes: 'minmax(100000,500000)'}

  nserver_agent:
    group: nserver_group
    path: /share/magi/modules/apache/ 
    execargs: []

  attacker_agent1:
    group: attacker_group1
    path: /share/magi/modules/flooder/flooder.tar.gz
    execargs: {dst: 'node-4', proto: 'udp', length: '1024', ratetype: 'flat', highrate: '1500', sport: 'minmax(1024,4096)'}

  attacker_agent2:
    group: attacker_group2
    path: /share/magi/modules/flooder/flooder.tar.gz
    execargs: {dst: 'node-3', proto: 'udp', length: '1024', ratetype: 'flat', highrate: '1500', sport: 'minmax(1024,4096)'}

  attacker_agent3:
    group: attacker_group3
    path: /share/magi/modules/flooder/flooder.tar.gz
    execargs: {dst: 'node-2', proto: 'udp', length: '1024', ratetype: 'flat', highrate: '1500', sport: 'minmax(1024,4096)'}

streamstarts: [ nserverstream, nclientstream, sensorstream, experimentstream, attackstream, cleanupstream ]

eventstreams:

  nserverstream:         
      - type: event
        agent: nserver_agent 
        method: startServer
        trigger: nserverStarted 
        args: {}

      - type: trigger
        triggers: [ { event: nclientStopped} ] 

      - type: event
        agent: nserver_agent 
        method: stopServer 
        trigger: nserverStopped 
        args: {} 

  nclientstream:      
      - type: trigger
        triggers: [ { event: nserverStarted } ] 

      - type: event
        agent: nclient_agent
        method: startClient
        trigger: nclientStarted
        args: {}

      - type: trigger
        triggers: [ { event: rlsDone} ]
        
      - type: event
        agent: nclient_agent
        method: stopClient
        trigger: nclientStopped
        args: {}

  sensorstream:
      - type: trigger
        triggers: [ { event: nclientStarted } ] 

      - type: event
        agent: intfsensor_agent
        method: startCollection
        args: {}
        trigger: monitorStarted

      - type: trigger
        triggers: [ { event: rlsDone} ]

      - type: event
        agent: intfsensor_agent
        method: stopCollection
        trigger: monitorStopped 
        args: {} 
                
  experimentstream: 
      - type: trigger
        triggers: [ { event: monitorStarted } ] 

      - type: event
        agent: server_agent 
        method: startRLS
        trigger: rlsStarted 
        args:
          anum_of_pmus: 4
          bdata_port: 65000
          cfile_of_initials: /proj/montage/magi-modules/rls_centralized/data/large/InitialGuess.txt
        
      - type: trigger
        triggers: [ {event: rlsStarted} ]

      - type: trigger
        triggers: [{timeout: 1000}]

      - type: event
        agent: client_agent1 
        method: startPMU
        args:
          rls_host: node-0
          rls_port: 65000
          source_file: /proj/montage/magi-modules/rls_centralized/data/large/Y1_3581.txt

      - type: trigger
        triggers: [{timeout: 250}]
        
      - type: event
        agent: client_agent2 
        method: startPMU
        args:
          rls_host: node-0
          rls_port: 65000
          source_file: /proj/montage/magi-modules/rls_centralized/data/large/Y2_3581.txt

      - type: trigger
        triggers: [{timeout: 250}]          

      - type: event
        agent: client_agent3 
        method: startPMU
        args:
          rls_host: node-0
          rls_port: 65000
          source_file: /proj/montage/magi-modules/rls_centralized/data/large/Y3_3581.txt

      - type: trigger
        triggers: [{timeout: 250}]
                  
      - type: event
        agent: client_agent4 
        method: startPMU
        trigger: pmuStarted
        args:
          rls_host: node-0
          rls_port: 65000
          source_file: /proj/montage/magi-modules/rls_centralized/data/large/Y4_3581.txt

      - type: trigger
        triggers: [ { event: pmuStarted} ] 
                  
      - type: event
        agent: server_agent 
        method: returnWhenRLSDone
        trigger: rlsDone
        args: {}

  attackstream:
      - type: trigger
        triggers: [ { event: pmuStarted } ]

      - type: trigger
        triggers: [ { timeout: 10000 } ]

      - type: event
        agent: attacker_agent1
        method: startFlood
        trigger: attackStarted1
        args: {}

      - type: trigger
        triggers: [ { event: attackStarted1 } ]

      - type: trigger
        triggers: [ { timeout: 30000 } ]

      - type: event
        agent: attacker_agent2
        method: startFlood
        trigger: attackStarted2
        args: {}

      - type: trigger
        triggers: [ { event: attackStarted2 } ]

      - type: trigger
        triggers: [ { timeout: 30000 } ]

      - type: event
        agent: attacker_agent3
        method: startFlood
        trigger: attackStarted3
        args: {}

      - type: trigger
        triggers: [ { event: attackStarted3 } ]

      - type: trigger
        triggers: [ { event: rlsDone } ]

      - type: event
        agent: attacker_agent1
        method: stopFlood
        trigger: attackStopped1
        args: {}

      - type: event
        agent: attacker_agent2
        method: stopFlood
        trigger: attackStopped2
        args: {}

      - type: event
        agent: attacker_agent3
        method: stopFlood
        trigger: attackStopped3
        args: {}

  cleanupstream:
      - type: trigger
        triggers: [ { event: attackStopped1 } ]

      - type: trigger
        triggers: [ { event: attackStopped2 } ]

      - type: trigger
        triggers: [ { event: attackStopped3 } ]

      - type: trigger
        triggers: [ { event: nserverStopped } ] 
          
      - type: trigger
        triggers: [ { event: monitorStopped, target: exit } ] 

